package com.ningyuan.mobile.service.impl;

import com.ningyuan.base.BaseServiceImpl;
import com.ningyuan.mobile.daomapper.mapper.ShopCustomerMapper;
import com.ningyuan.mobile.dto.ShopRedpacketDto;
import com.ningyuan.mobile.dto.UserInfoDto;
import com.ningyuan.mobile.model.ShopCustomerModel;
import com.ningyuan.mobile.model.ShopOrderModel;
import com.ningyuan.mobile.service.IShopCustomerService;
import com.ningyuan.wx.model.WxRelateModel;
import com.ningyuan.wx.service.IWxCommonRelateService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import tk.mybatis.mapper.entity.Example;

import java.math.BigDecimal;
import java.util.Random;

/**
 * generated by Generate Service.groovy 
 * <p>Date: Fri Apr 03 11:08:59 CST 2020.</p>
 *
 * @author (zengrc)
 */

@Service
public class ShopCustomerServiceImpl extends BaseServiceImpl<ShopCustomerMapper, ShopCustomerModel> implements IShopCustomerService {
    @Autowired
    private IWxCommonRelateService commonRelateService;

    @Override
    public void updateCustomer(ShopOrderModel orderModel) {
        // TODO 根据支付结果更新customer
        ShopCustomerModel customerModel = new ShopCustomerModel();
        customerModel.setOpenId(orderModel.getOpenId());
        ShopCustomerModel updateModel = this.selectLimitOne(customerModel);
        updateCustomerModel(updateModel);

//        查找wx_relate表的关联关系，给上一级的客户加积分，更新customer
        WxRelateModel relateModel = commonRelateService.getByOpenId(orderModel.getOpenId());
        /*if (!StringUtils.isEmpty(relateModel.getParentOpenId())) {
            updateParentCustomer(relateModel.getParentOpenId());
        }*/
    }

    private void updateParentCustomer(String parentOpenId) {
        // TODO 这里有问题的
        ShopCustomerModel customerModel = new ShopCustomerModel();
        customerModel.setOpenId(parentOpenId);
        ShopCustomerModel model = this.selectLimitOne(customerModel);
        model.setPoints(model.getPoints() + 1);
        model.setRedpacketAmount(model.getRedpacketAmount() + 10);

        if (model.getNewTask()) {
            model.setSpecialTask(Boolean.TRUE);
            model.setRedpacketAmount(model.getRedpacketAmount() + 90);
        }else {
            model.setNewTask(Boolean.TRUE);
        }
        model.setRedpacketReceive(model.getRedpacketReceive() + 1);
        this.updateByPrimaryKeySelective(model);
    }

    private void updateCustomerModel(ShopCustomerModel updateModel) {
        updateModel.setPoints(updateModel.getPoints() + 1);
        updateModel.setRedpacketAmount(updateModel.getRedpacketAmount() + 10);
        updateModel.setRedpacketReceive(updateModel.getRedpacketReceive() + 1);
        this.updateByPrimaryKeySelective(updateModel);
    }

    @Override
    public UserInfoDto queryUserInfo(String openId) {
        return this.mapper.queryUserInfo(openId);
    }

    @Override
    public ShopCustomerModel checkuser(String openId) {
        Example example = new Example(ShopCustomerModel.class);
        Example.Criteria criteria = example.createCriteria();
        criteria.andEqualTo("openId", openId);
        criteria.andGreaterThan("redpacketReceive", "0");
        criteria.andGreaterThan("redpacketFinance", "0");
        criteria.andNotEqualTo("vip", "0");
        return this.mapper.selectOneByExample(example);
    }

    @Override
    public String openRedpacket(String openId) {
        // 10个红包，总共发20元
        ShopRedpacketDto redpacket = this.mapper.getRedpacket(openId);
        String money = getRandomMoney(redpacket) + "";
        this.updateRedpacket(openId, redpacket);
        return money;
    }

    private void updateRedpacket(String openId, ShopRedpacketDto redpacket) {
        ShopCustomerModel customerModel = new ShopCustomerModel();
        customerModel.setOpenId(openId);
        customerModel.setId(redpacket.getId());
        customerModel.setRedpacketFinance(new BigDecimal(redpacket.getRemainMoney()));
        customerModel.setRedpacketReceive(redpacket.getRemainSize());
        this.mapper.updateByPrimaryKeySelective(customerModel);
    }

    private double getRandomMoney(ShopRedpacketDto redpacket) {
        // remainSize 剩余的红包数量
        // remainMoney 剩余的钱
        if (redpacket.getRemainSize() == 1) {
            redpacket.setRemainSize(redpacket.getRemainSize()-1);
            return (double) Math.round(Double.parseDouble(redpacket.getRemainMoney()) * 100) / 100;
        }
        Random r = new Random();
        double min = 0.01; //
        double max = this.divide(redpacket.getRemainMoney(), redpacket.getRemainSize() * 0.5);
        double money = this.mul(r.nextDouble(), max);
        money = money <= min ? 0.01: money;
        money = Math.floor(money * 100) / 100;
        redpacket.setRemainSize(redpacket.getRemainSize()-1);
        redpacket.setRemainMoney(this.sub(redpacket.getRemainMoney(), money) + "");
        return money;
    }

    // 提供精确的减法运算。
    private double sub(String value1, Double value2) {
        BigDecimal b1 = new BigDecimal(value1);
        BigDecimal b2 = new BigDecimal(Double.toString(value2));
        return b1.subtract(b2).doubleValue();
    }

    // 提供精确的乘法运算。
    private Double mul(Double value1, Double value2) {
        BigDecimal b1 = new BigDecimal(Double.toString(value1));
        BigDecimal b2 = new BigDecimal(Double.toString(value2));
        return b1.multiply(b2).doubleValue();
    }

    private Double divide(String value1, Double value2) {
        BigDecimal b1 = new BigDecimal(value1);
        BigDecimal b2 = new BigDecimal(Double.toString(value2));
        return b1.divide(b2, BigDecimal.ROUND_FLOOR).doubleValue();
    }

}
