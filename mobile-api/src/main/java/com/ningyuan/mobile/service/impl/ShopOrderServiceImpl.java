package com.ningyuan.mobile.service.impl;

import com.ningyuan.base.BaseServiceImpl;
import com.ningyuan.core.Context;
import com.ningyuan.mobile.constant.OrderEnum;
import com.ningyuan.mobile.daomapper.mapper.ShopOrderMapper;
import com.ningyuan.mobile.model.ShopOrderItemModel;
import com.ningyuan.mobile.model.ShopOrderModel;
import com.ningyuan.mobile.service.IShopOrderItemService;
import com.ningyuan.mobile.service.IShopOrderService;
import com.ningyuan.utils.DateUtil;
import com.ningyuan.utils.RandomUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

/**
 * generated by Generate Service.groovy 
 * <p>Date: Sat Mar 21 14:55:34 CST 2020.</p>
 *
 * @author (zengrc)
 */

@Service("orderService")
public class ShopOrderServiceImpl extends BaseServiceImpl<ShopOrderMapper, ShopOrderModel> implements IShopOrderService {

    @Autowired
    private IShopOrderItemService orderItemService;

    @Override
    public void saveOrder(ShopOrderModel order, List<ShopOrderItemModel> itemList) {
        order.setOrderSn(getOrderSn());
        this.insertSelective(order);
        for(ShopOrderItemModel item:itemList){
            item.setIdOrder(order.getId());
            orderItemService.insertSelective(item);
        }
    }

    @Override
    public void cancelOrder(String orderSn) {
        // TODO 取消订单
        ShopOrderModel shopOrderModel = queryOrderByUser(orderSn);
        if (shopOrderModel != null && !shopOrderModel.getHasPay()) {
            // 未支付订单，可以取消
            shopOrderModel.setStatus(OrderEnum.OrderStatusEnum.CANCEL.getId());
            this.updateByPrimaryKeySelective(shopOrderModel);
        }

    }

    @Override
    public ShopOrderModel confirmReceive(String orderSn) {
        // TODO 确认订单
        ShopOrderModel shopOrderModel = queryOrderByUser(orderSn);
        if (shopOrderModel != null && !shopOrderModel.getHasPay()) {
            // 未支付订单，可以取消
            shopOrderModel.setStatus(OrderEnum.OrderStatusEnum.FINISHED.getId());
            this.updateByPrimaryKeySelective(shopOrderModel);
        }
        return shopOrderModel;
    }

    private ShopOrderModel queryOrderByUser(String orderSn) {
        ShopOrderModel orderModel = new ShopOrderModel();
        orderModel.setOpenId(Context.getOpenId());
        orderModel.setOrderSn(orderSn);
        return this.selectLimitOne(orderModel);
    }

    @Override
    public void preHandlePaySuccess(Map<String, String> reqData) throws Exception {
        // 支付成功的逻辑
    }

    @Override
    public void afterHandlePaySuccess(Map<String, String> reqData) throws Exception {
        // 支付成功的逻辑
    }

    @Override
    public void verify(String openId) throws Exception {
        // 触发微信支付，trigger的逻辑
    }

    @Override
    public void preHandle(String openId, String id) throws Exception {
        // 通用微信支付的逻辑
    }

    /**
     * 获取唯一订单号
     * 时间戳+随机数<br>
     * 建议生产环境使用redis获取唯一订单号
     *
     * @return
     */
    private String getOrderSn() {
        return DateUtil.getAllTime() + RandomUtil.getRandomNumber(6);
    }


    @Override
    public boolean isUpdateRelate(String openId) {
        return false;
    }
}
