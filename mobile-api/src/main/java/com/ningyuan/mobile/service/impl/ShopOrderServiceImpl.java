package com.ningyuan.mobile.service.impl;

import com.ningyuan.base.BaseServiceImpl;
import com.ningyuan.base.exception.StatelessException;
import com.ningyuan.base.exception.ViewException;
import com.ningyuan.core.Conf;
import com.ningyuan.core.Context;
import com.ningyuan.mobile.constant.OrderEnum;
import com.ningyuan.mobile.daomapper.mapper.ShopOrderMapper;
import com.ningyuan.mobile.dto.OrderDto;
import com.ningyuan.mobile.model.ShopOrderItemModel;
import com.ningyuan.mobile.model.ShopOrderModel;
import com.ningyuan.mobile.service.IShopCustomerService;
import com.ningyuan.mobile.service.IShopOrderItemService;
import com.ningyuan.mobile.service.IShopOrderService;
import com.ningyuan.utils.DateUtil;
import com.ningyuan.utils.RandomUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

/**
 * generated by Generate Service.groovy 
 * <p>Date: Sat Mar 21 14:55:34 CST 2020.</p>
 *
 * @author (zengrc)
 */

@Service("orderService")
public class ShopOrderServiceImpl extends BaseServiceImpl<ShopOrderMapper, ShopOrderModel> implements IShopOrderService {

    @Autowired
    private IShopOrderItemService orderItemService;

    @Autowired
    private IShopCustomerService customerService;

    @Override
    public void saveOrder(ShopOrderModel order, List<ShopOrderItemModel> itemList) {
        order.setOrderSn(getOrderSn());
        this.insertSelective(order);
        for(ShopOrderItemModel item:itemList){
            item.setIdOrder(order.getId());
            orderItemService.insertSelective(item);
        }
    }

    @Override
    public void cancelOrder(String orderSn) {
        // TODO 取消订单
        ShopOrderModel shopOrderModel = queryOrderByUser(orderSn);
        if (shopOrderModel != null && !shopOrderModel.getHasPay()) {
            // 未支付订单，可以取消
            shopOrderModel.setStatus(OrderEnum.OrderStatusEnum.CANCEL.getId());
            this.updateByPrimaryKeySelective(shopOrderModel);
        }

    }

    @Override
    public ShopOrderModel confirmReceive(String orderSn) {
        // TODO 确认订单
        ShopOrderModel shopOrderModel = queryOrderByUser(orderSn);
        if (shopOrderModel != null && !shopOrderModel.getHasPay()) {
            // 未支付订单，可以取消
            shopOrderModel.setStatus(OrderEnum.OrderStatusEnum.FINISHED.getId());
            this.updateByPrimaryKeySelective(shopOrderModel);
        }
        return shopOrderModel;
    }

    @Override
    public List<OrderDto> getOrders(String openId, Integer status) {
        return this.mapper.getOrders(openId, status);
    }

    private ShopOrderModel queryOrderByUser(String orderSn) {
        ShopOrderModel orderModel = new ShopOrderModel();
        orderModel.setOpenId(Context.getOpenId());
        orderModel.setOrderSn(orderSn);
        return this.selectLimitOne(orderModel);
    }

    @Override
    public void preHandlePaySuccess(Map<String, String> reqData) throws Exception {
        // 支付成功的逻辑，更新订单状态，会员积分增加，红包数量增加
        String orderSn = reqData.get("attach");
        String openId = reqData.get("openid");
        ShopOrderModel orderModel = new ShopOrderModel();
        orderModel.setOpenId(openId);
        orderModel.setOrderSn(orderSn);
        orderModel.setStatus(1);
        orderModel = this.selectLimitOne(orderModel);

        this.updateOrder(orderModel);

        // customerService.updateCustomer(orderModel);

    }

    @Override
    public void preHandle(String openId, String orderSn) throws Exception {
        // 通用微信支付的逻辑
        ShopOrderModel orderModel = new ShopOrderModel();
        orderModel.setOpenId(openId);
        orderModel.setOrderSn(orderSn);
        orderModel.setHasPay(Boolean.TRUE);
        ShopOrderModel model = this.selectLimitOne(orderModel);
        if (model != null) {
            throw new ViewException(Conf.get("shop.pay.success.url") + openId, "已支付");
        }
    }

    /**
     *  生成订单号
     * @return
     */
    private String getOrderSn() {
        return DateUtil.getAllTime() + RandomUtil.getRandomNumber(6);
//        return CreateGUID.createGuId();
    }

    public String getPayPrice(String openId, String orderId) throws StatelessException {
        // 计算支付金额
        ShopOrderModel orderModel = new ShopOrderModel();
        orderModel.setOpenId(openId);
        orderModel.setOrderSn(orderId);
        orderModel.setHasPay(Boolean.FALSE);
        ShopOrderModel model = this.selectLimitOne(orderModel);
        if (model == null) {
            throw new StatelessException();
        }
        return model.getTotalPrice().toString();
    }


    @Override
    public boolean isUpdateRelate(String openId) {
        return false;
    }

    private void updateOrder(ShopOrderModel orderModel) {
        // TODO 根据支付结果更新订单表
        orderModel.setStatus(OrderEnum.OrderStatusEnum.UN_SEND.getId());
        orderModel.setHasPay(Boolean.TRUE);
        this.updateByPrimaryKeySelective(orderModel);
    }
}
