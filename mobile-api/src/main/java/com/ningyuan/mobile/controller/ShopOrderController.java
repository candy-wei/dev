package com.ningyuan.mobile.controller;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.ningyuan.base.BaseController;
import com.ningyuan.bean.front.Rets;
import com.ningyuan.core.Context;
import com.ningyuan.mobile.constant.OrderEnum;
import com.ningyuan.mobile.dto.ShopCartDto;
import com.ningyuan.mobile.model.ShopAddressModel;
import com.ningyuan.mobile.model.ShopCartModel;
import com.ningyuan.mobile.model.ShopOrderItemModel;
import com.ningyuan.mobile.model.ShopOrderModel;
import com.ningyuan.mobile.service.IShopAddressService;
import com.ningyuan.mobile.service.IShopCartService;
import com.ningyuan.mobile.service.IShopOrderService;
import com.ningyuan.utils.Lists;
import com.ningyuan.utils.Maps;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import tk.mybatis.mapper.entity.Example;

import java.math.BigDecimal;
import java.util.List;

/**
 * generated by Generate Controller.groovy 
 * <p>Date: Sat Mar 21 14:54:11 CST 2020.</p>
 *
 * @author (zengrc)
 */

@Controller
@RequestMapping("shop/order")
public class ShopOrderController extends BaseController {

    private Logger logger = LoggerFactory.getLogger(getClass());
    @Autowired
    private IShopOrderService orderService ;
    @Autowired
    private IShopCartService cartService;
    @Autowired
    private IShopAddressService addressService;

    @RequestMapping(value ="{orderSn}",method = RequestMethod.GET)
    @ResponseBody
    public Object get(@PathVariable(value = "orderSn") String orderSn){
        ShopOrderModel order = new ShopOrderModel();
        order.setOrderSn(orderSn);
        return Rets.success(orderService.selectLimitOne(order));
    }

    @RequestMapping(value = "getOrders",method = RequestMethod.GET)
    @ResponseBody
    public Object getOrders(@RequestParam(value = "status",required = false) Integer status){
        String openId = Context.getOpenId();
        PageHelper.startPage(Context.getHttpServletRequest());
        Example example = new Example(ShopOrderModel.class);
        Example.Criteria criteria = example.createCriteria();
        criteria.andEqualTo("openId", openId);
        example.orderBy("id").desc();
        if(status != null && status != 0){
            criteria.andEqualTo("status", status);
        }
        return Rets.success( PageInfo.of(orderService.selectByExample(example)));
    }

    @RequestMapping(value = "prepareCheckout",method = RequestMethod.GET)
    @ResponseBody
    public Object prepareCheckout(@RequestParam(value = "chosenAddressId",required = false) Long chosenAddressId){
        String openId = Context.getOpenId();
        ShopCartModel cartModel = new ShopCartModel();
        cartModel.setOpenId(openId);
        List<ShopCartModel> list = cartService.select(cartModel);
        ShopAddressModel address = new ShopAddressModel();
        logger.info("chosenAddressIdï¼š{}",chosenAddressId);
        if(chosenAddressId==null || chosenAddressId==0) {
            address = addressService.getDefaultAddr(openId);
        }else{
            address.setId(chosenAddressId);
            address = addressService.selectLimitOne(address);
        }
        return Rets.success(Maps.newHashMap(
                "list",list,"addr",address
        ));
    }

    @RequestMapping(value = "save",method = RequestMethod.POST)
    @ResponseBody
    public Object save(
            @RequestParam("idAddress") Long idAddress,
            @RequestParam(value = "message",required = false) String message
    ){

        String openId = Context.getOpenId();
        List<ShopCartDto> cartList = cartService.queryCart(openId);
        ShopOrderModel order = new ShopOrderModel();
        order.setOpenId(openId);
        order.setIdAddress(idAddress);
        BigDecimal totalPrice = new BigDecimal(0);
        List<ShopOrderItemModel> itemList  = Lists.newArrayList();
        for(ShopCartDto cart:cartList){
            ShopOrderItemModel orderItem = new ShopOrderItemModel();
            orderItem.setIdGoods(cart.getIdGoods());
            orderItem.setIdSku(cart.getIdSku());
            orderItem.setPrice(cart.getPrice());
            orderItem.setCount(cart.getAmount());
            orderItem.setTotalPrice(orderItem.getPrice().multiply(orderItem.getCount()));
            totalPrice = totalPrice.add(orderItem.getTotalPrice());
            itemList.add(orderItem);
        }
        order.setMessage(message);
        order.setTotalPrice(totalPrice);
        order.setRealPrice(totalPrice);
        order.setStatus(OrderEnum.OrderStatusEnum.UN_PAY.getId());

        orderService.saveOrder(order,itemList);
        cartService.deleteCartList(cartList);
        return Rets.success(order);
    }


    @RequestMapping(value = "cancel/{orderSn}",method = RequestMethod.POST)
    @ResponseBody
    public Object cancel(@PathVariable("orderSn") String orderSn){
        orderService.cancelOrder(orderSn);
        return Rets.success();
    }

    @RequestMapping(value = "confirm/{orderSn}",method = RequestMethod.POST)
    @ResponseBody
    public Object confirm(@PathVariable("orderSn") String orderSn){
        ShopOrderModel order = orderService.confirmReceive(orderSn);
        return Rets.success(order);
    }
}
